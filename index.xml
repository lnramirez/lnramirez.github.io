<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bajoneando Blog</title>
    <link>https://lnramirez.github.io/</link>
    <description>Recent content on Bajoneando Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 05 Aug 2016 15:50:18 -0400</lastBuildDate>
    <atom:link href="https://lnramirez.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>On using Hugo and Monger</title>
      <link>https://lnramirez.github.io/post/on-using-hugo-and-monger/</link>
      <pubDate>Fri, 05 Aug 2016 15:50:18 -0400</pubDate>
      
      <guid>https://lnramirez.github.io/post/on-using-hugo-and-monger/</guid>
      <description>&lt;p&gt;The web app was hostend on Openshift before, my data in mongo. I used RockMongo to get a dump of my data. It was a nice .gz file that as luck will have it, I need to read at least five sites before I actually know how to extract it. Yup, if my life depended on my abilities to extract files I&amp;rsquo;d be in the strees by now. With the file handy and have done all the running mongo in docker I needed to upload the actual data.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo localhost:1111
MongoDB shell version: 3.2.0
connecting to: localhost:1111/test
&amp;gt; use anotherdb
switched to db anotherdb
&amp;gt; load(&#39;mongo-lnramirez-20160718-172713.js&#39;)
true
&amp;gt; show collections
blogEntry
images.chunks
images.files
visit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So there I was decided to use Hugo for my blog, all collections uploaded to my local mongo db and all it was required was reading mongo and generate a mongo equivalent.&lt;/p&gt;

&lt;p&gt;Mongo is a non-structured repository meaning structures are not rigid but they all are json. My json objects didn&amp;rsquo;t change that much over time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; db.blogEntry.find({subject: &amp;quot;Iteration Guaymango release notes&amp;quot;})
{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fc81041be6c1e4069b1046a&amp;quot;), &amp;quot;_class&amp;quot; : &amp;quot;com.bajoneando.lnramirez.blog.BlogEntry&amp;quot;, &amp;quot;subject&amp;quot; : &amp;quot;Iteration Guaymango release notes&amp;quot;, &amp;quot;article&amp;quot; : &amp;quot;Iteration Guaymango Rulz!\n\noh boy! I cannot believe how much work I did this iteration. \n\n### New features\n\n#### Google code prettify\n\nWe added css to our code, thanks to markdown awesome html sintax now something like: \n\n    @RequestMapping(value=\&amp;quot;/update\&amp;quot;, method=RequestMethod.PUT, headers=\&amp;quot;Accept=application/json\&amp;quot;)\n    @ResponseStatus(HttpStatus.OK)\n    public void updateEntry(@RequestBody BlogEntry blogEntry) {\n        blogEntry.setLastUpdateDate(new Date());\n        blogEntry.setPrintableHtml(markdownProcessor.markdown(blogEntry.getArticle()));\n        blogEntryRepository.save(blogEntry);\n    }\n\nis possible\n \n#### Sitemesh 2 templating\n\nProbably this ain&#39;t that cool to the bare eye, nonetheless is so good for developers. Before all pages had embedded css and boiler html code to look alike. Now every thing goes so smooth.\n\n*About* page has only this code\n\n    &amp;lt;html lang=\&amp;quot;en\&amp;quot;&amp;gt;\n        &amp;lt;head&amp;gt;\n            &amp;lt;title&amp;gt;About&amp;lt;/title&amp;gt;\n        &amp;lt;/head&amp;gt;\n        &amp;lt;body&amp;gt;\n            &amp;lt;header&amp;gt;\n                &amp;lt;h2&amp;gt;Bajoneando&amp;lt;/h2&amp;gt;\n            &amp;lt;/header&amp;gt;\n            &amp;lt;article&amp;gt;\n                &amp;lt;strong&amp;gt;Bajoneando meaning&amp;lt;/strong&amp;gt;\n                &amp;lt;p&amp;gt;\n                    Bajonear is a salvadorean-spanish verb that you use to refer\n                    to the action of eating after hours, probably after a party or \n                    a long day at work. \n                    You can use it when you are famished and heading towards to\n                    grab a bite, something like &amp;lt;em&amp;gt;I am going to bajonear&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;\n                &amp;lt;p&amp;gt;\n                    I am Bajoneando as you can see in the footer because I usually \n                    program at work only but nowadays I have been feeling like \n                    programming after hours with a cup of joe, nuts, dried fruit \n                    or any paleo snack that I can eat\n                &amp;lt;/p&amp;gt;\n            &amp;lt;/article&amp;gt;\n        &amp;lt;/body&amp;gt;\n    &amp;lt;/html&amp;gt;\n\nyet produces a beautiful page go to  [About page](http://lnramirez.cloudfoundry.com/about/ \&amp;quot;About page\&amp;quot;) and see it for yourself.\n\n#### Article editor\n\nWell not everybody is supposed to add, edit article but I have left it as is, like I said in the beginning _please don&#39;t be mean =)_ anyhow, we can add, update an entry and see a preview immediatly, no refresh =D thanks to the awesome dojo toolkit.\n\n#### Pagination\n\nYup pagination was added as well, nothing too fancy just a previous and later entries links, I am hopping to write lots more entries everynow and then.  Right now we have 5 entries per page, sorted **DESC** on published Date\n\n#### HTML5\n\nI know, I know, I should not brag about it but my site is HTML5 complaint or at least I check up my generated html at [Markup Validation Service](http://validator.w3.org/ \&amp;quot;Markup Validation Service\&amp;quot;) &amp;quot;, &amp;quot;publishDate&amp;quot; : ISODate(&amp;quot;2012-06-01T00:00:00Z&amp;quot;), &amp;quot;lastUpdateDate&amp;quot; : ISODate(&amp;quot;2012-06-04T13:24:20.582Z&amp;quot;)}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So as I have explained before I was storing already markdown-ish and Hugo format is very simple too, you create a file with an iphenized name to be more url friendly, in the file, at top date, title and some other options&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
date = &amp;quot;2016-08-05T15:50:18-04:00&amp;quot;
draft = true
title = &amp;quot;on using hugo and monger&amp;quot;

+++

I use RockMongo to get a dump of my mongo data. It was a nice .gz file that as usual I need to read at least five sites before I act
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and yes, this is actually recursive ;)&lt;/p&gt;

&lt;p&gt;my go to place to look what library should I by using to this or that is &lt;a href=&#34;http://clojurewerkz.org/&#34;&gt;http://clojurewerkz.org/&lt;/a&gt; looking up on how to connect to mongo seems like Monger is your best option &lt;a href=&#34;http://clojuremongodb.info/&#34;&gt;http://clojuremongodb.info/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use leinegen project, adding dependencies to monger&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  :dependencies [[org.clojure/clojure &amp;quot;1.8.0&amp;quot;]
                 [com.novemberain/monger &amp;quot;3.0.2&amp;quot;]
                 [selmer &amp;quot;1.0.7&amp;quot;]
                 [clj-time &amp;quot;0.12.0&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Importing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (:require [monger.core :as mg]
            [monger.collection :as mc]
            [selmer.parser :refer [render-file]]
            [clj-time.format :as f]
            [clj-time.coerce :as c]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the action needes is get all the blog entries and write them as md what Hugo expects&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn gen-files
  []
  (map #(write-md %) (all-blog-entries)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mongo magic happens pretty quick, please don&amp;rsquo;t blink&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn all-blog-entries
  []
  ;; connect with authentication
  (let [conn (mg/connect {:port 1111})
        db (mg/get-db conn &amp;quot;test&amp;quot;)
        coll &amp;quot;blogEntry&amp;quot;]
    (mc/find-maps db coll {})))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rest is writting the file Hugo expects, and I wanted to pause here because I was going to use a template generator, again per clojurewerkz I chose selmer but something funky happened because of the characters were generating garbage so I had to rely on good all concatenating, not my brightest moment I know&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defn hyphenize
  [s]
  (-&amp;gt;
      (replace s #&amp;quot;(::|\?|\.|-)&amp;quot; &amp;quot;&amp;quot;)
      (replace #&amp;quot;([A-Z]+)([A-Z][a-z])&amp;quot; &amp;quot;$1-$2&amp;quot;)
      (replace #&amp;quot;([a-z\d])([A-Z])&amp;quot; &amp;quot;$1-$2&amp;quot;)
      (replace #&amp;quot;\s+&amp;quot; &amp;quot;-&amp;quot;)
      (replace #&amp;quot;[áa]&amp;quot; &amp;quot;a&amp;quot;)
      (replace #&amp;quot;[ée]&amp;quot; &amp;quot;e&amp;quot;)
      (replace #&amp;quot;[íi]&amp;quot; &amp;quot;i&amp;quot;)
      (replace #&amp;quot;[óo]&amp;quot; &amp;quot;o&amp;quot;)
      (replace #&amp;quot;[úu]&amp;quot; &amp;quot;u&amp;quot;)
      (replace #&amp;quot;_&amp;quot; &amp;quot;-&amp;quot;)
      (lower-case)))

(defn extract-date
  [d]
  (f/unparse (:date-hour-minute-second f/formatters) (c/from-date d)))

(defn gen-hugo
  [subject pub-date text]
  (str &amp;quot;+++\ndate = \&amp;quot;&amp;quot; pub-date &amp;quot;\&amp;quot;\ndraft = \&amp;quot;true\&amp;quot;\ntitle = \&amp;quot;&amp;quot;subject&amp;quot;\&amp;quot;\n+++\n&amp;quot; text))

(defn write-md
  [entry]
  (let [subject (:subject entry)
        file-name (hyphenize subject)
        text (:article entry)
        pub-date (extract-date (:publishDate entry))]
    (spit (str file-name &amp;quot;.md&amp;quot;) (gen-hugo subject pub-date text))))

(defn gen-files
  []
  (map #(write-md %) (all-blog-entries)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With that, all my files were generated, named correctly (for the most part) and didn&amp;rsquo;t have to do anything else. So here we are starting another chapter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://lnramirez.github.io/about/</link>
      <pubDate>Mon, 18 Jul 2016 17:28:12 -0400</pubDate>
      
      <guid>https://lnramirez.github.io/about/</guid>
      <description>&lt;p&gt;Bajonear is a salvadorean-spanish verb that you use to refer
                    to the action of eating after hours, probably after a party or
                    a long day at work.
                    You can use it when you are famished and heading towards to
                    grab a bite, something like &lt;em&gt;I am going to bajonear&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I am Bajoneando because I code for a living but after dark I code for fun in Scala/Clojure/Haskell while I&amp;rsquo;m
&lt;em&gt;Bajoneando&lt;/em&gt; with a cup of joe, nuts or dried fruit.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>And now we are using Hugo</title>
      <link>https://lnramirez.github.io/post/and-now-we-are-using-hugo/</link>
      <pubDate>Mon, 18 Jul 2016 17:28:12 -0400</pubDate>
      
      <guid>https://lnramirez.github.io/post/and-now-we-are-using-hugo/</guid>
      <description>&lt;p&gt;A quick story on this site is as follow.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Created a simple website using spring, mongo, dojo and hosted in Cloudfoundry&lt;/li&gt;
&lt;li&gt;Moved it to Openshift&lt;/li&gt;
&lt;li&gt;Reimplemented frontend using clojurescript&lt;/li&gt;
&lt;li&gt;Never updated it much&lt;/li&gt;
&lt;li&gt;Some feautures stopped working&lt;/li&gt;
&lt;li&gt;Decided to focus development somewhere else&lt;/li&gt;
&lt;li&gt;Decided to use github pages and Hugo to host the blog&lt;/li&gt;
&lt;li&gt;Here we are&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hugo makes sense to me because all my articles were written in markdown before,
though there are a couple of things that don&amp;rsquo;t work the same, it shouldn&amp;rsquo;t be that hard.&lt;/p&gt;

&lt;p&gt;Now what I needed shouldn&amp;rsquo;t be that difficult either&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All the articles where store in a collection &lt;code&gt;blogEntry&lt;/code&gt; so I only had to get the data out of mongo&lt;/li&gt;
&lt;li&gt;And map it to a Hugo equivalent. Hugo is pretty simple:

&lt;ul&gt;
&lt;li&gt;you create a file .md and name of the file becomes url&lt;/li&gt;
&lt;li&gt;file content has a header and what not but mainly you write markdown&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make Hugo generate site content and upload it to github pages&lt;/li&gt;
&lt;li&gt;Finally update my cname record to point to github instead of redhat and tada this (will) should be up and running&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I had to endure a couple of things worth writting about.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How I got the data out of Openshift&lt;/li&gt;
&lt;li&gt;How I generated the content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found it so difficult to connect from a remote machine to Openshift, I am sure I saw somewhere people doing tunneling
or something in that direction. But in the end the data was the only thing needed. So I use RockMongo and generated a .js files.&lt;/p&gt;

&lt;p&gt;I load it to a local mongo database since it would be easier (or so I thought). Then I have come to an age where
having to install stuff sounds too much, and since Docker is so hip nowadays and trying to learn new stuff gave it a chance.&lt;/p&gt;

&lt;p&gt;Running docker with boot2docker in a Mac always is a pain. So there&amp;rsquo;s a lot of indirection, for example I had to use Docker
in Virtual Box, once you follow all the guidelines for Mac you always forget how to connect from your local machine to Docker.
So have handy this cli always.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval $(docker-machine env default)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;given that default is the name of virtual box machine
Now trying the line was torture&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --name database -v /Users/luisrm/prj/per/docker/var/mongodata:/data/db -d mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s supposed to run but then when was verifying that it was up and running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bamn, nada! Driving me crazy. So more cli you can look at the logs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker logs -f database
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten] MongoDB starting : pid=1 port=27017 dbpath=/data/db 64-bit host=a8faaa94bdc6
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten] db version v3.2.8
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten] git version: ed70e33130c977bda0024c125b56d159573dbaf0
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.1e 11 Feb 2013
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten] allocator: tcmalloc
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten] modules: none
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten] build environment:
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten]     distmod: debian71
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten]     distarch: x86_64
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten]     target_arch: x86_64
2016-07-18T20:35:46.508+0000 I CONTROL  [initandlisten] options: {}
2016-07-18T20:35:46.529+0000 I STORAGE  [initandlisten] exception in initAndListen: 98 Unable to create/open lock file: /data/db/mongod.lock errno:13 Permission denied Is a mongod instance already running?, terminating
2016-07-18T20:35:46.529+0000 I CONTROL  [initandlisten] dbexit:  rc: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now that gave me some shed on what&amp;rsquo;s going on, apparently though it was mounted permissions and what non sense still couldn&amp;rsquo;t acquired the lock.
Doing some stack overflow research I ended up on github bugs mentioning that mounting directly wouldn&amp;rsquo;t work but you could create a docker volume
(whatever that means)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker volume create --name mongodbdata
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and finally you run it with the volume you created and works&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --name database -v /Users/luisrm/prj/per/docker/var/mongodata:/data/db -d mongo
ae380df78141
$ docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                      NAMES
ae380df78141        mongo               &amp;quot;/entrypoint.sh mongo&amp;quot;   4 seconds ago       Up 3 seconds        0.0.0.0:27017-&amp;gt;27017/tcp   database
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you have to remember one thing, this container is not running on your machine, is listening on port 27017 but of the Virtual Box machine&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo localhost:27017
MongoDB shell version: 3.2.0
connecting to: localhost:27017/test
2016-07-20T10:31:23.328-0400 W NETWORK  [thread1] Failed to connect to 127.0.0.1:27017, reason: errno:61 Connection refused
2016-07-20T10:31:23.328-0400 E QUERY    [thread1] Error: couldn&#39;t connect to server localhost:27017, connection attempt failed :
connect@src/mongo/shell/mongo.js:226:14
@(connect):1:6

exception: connect failed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So in order for you to connect to it you have to forward that port to something else.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On virtual Box, right click the machine (default in my case) and click settings&lt;/li&gt;
&lt;li&gt;Click on network tab&lt;/li&gt;
&lt;li&gt;Click on Port forwarding&lt;/li&gt;
&lt;li&gt;Click on the + icon&lt;/li&gt;
&lt;li&gt;On the row select tcp protocol&lt;/li&gt;
&lt;li&gt;Enter 27017 for Guest Port&lt;/li&gt;
&lt;li&gt;And I chose 1111 for Host Port&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;then when you try&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo localhost:1111
MongoDB shell version: 3.2.0
connecting to: localhost:1111/test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, off to the races. Now I need to read all the collections, generate the hugo files, upload it to Github and would be done with it. So I thought, Scala, well too easy, let&amp;rsquo;s do it Clojure way
using Mongoer but let&amp;rsquo;s leave that to for a next post.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What are you going to write that is worthy of me? </title>
      <link>https://lnramirez.github.io/post/what-are-you-going-to-write-that-is-worthy-of-me-/</link>
      <pubDate>Mon, 08 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/what-are-you-going-to-write-that-is-worthy-of-me-/</guid>
      <description>&lt;p&gt;What are you going to write that is worthy of me?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;JJ Abrams&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When I started this venture of having a blog, back in 2012, I did it with the whole purpose of polishing my coding skills and learning a couple of new ones.&lt;/p&gt;

&lt;p&gt;I implemented it using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;spring (data, mvc, security) for web server and backend&lt;/li&gt;
&lt;li&gt;freemarker and dojo as front end&lt;/li&gt;
&lt;li&gt;mongo as storage&lt;/li&gt;
&lt;li&gt;gradle, built tool&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of those the ones I wasn&amp;rsquo;t using at the moment were mongo and gradle. It wasn&amp;rsquo;t that big of a deal actually, earlier spring data supported mongo out of the box and gradle is so simple and easy that coming from maven is like a bliss.&lt;/p&gt;

&lt;p&gt;Overtime I haven&amp;rsquo;t added much to the site, I added &lt;em&gt;Bootstrap&lt;/em&gt; to have a fancier CSS rendering and a couple of gimmicks, here and there. I have tried to write a little bit, but nothing closer to the expectations everyone has when they decide to have a blog.&lt;/p&gt;

&lt;p&gt;But, my life changed a lot and all started that very same 2012 year. I received an email from a recruiter about a job that required java but they were into using Scala. Boy, I never heard of that language before. Since that day I devoted myself to learn the language and obviously I pursuit the job, unfortunately it didn&amp;rsquo;t work out with the company, but I&amp;rsquo;d always be grateful that I received that email.&lt;/p&gt;

&lt;p&gt;After that, I took in coursera
* Functional Programming Principles in Scala&lt;/p&gt;

&lt;p&gt;and was even more blown away  by how different the functional programming paradigm is compared to the OO one, that I cherished as the jewel of the crown.&lt;/p&gt;

&lt;p&gt;Finally, I&amp;rsquo;ve been able to work professionally using Scala and must say that&amp;rsquo;s been the most rewarding experience. I don&amp;rsquo;t code everyday in Scala, but when I am able to do it, it doesn&amp;rsquo;t feel like a job to me, is one of those precious moments when you do something because you love it. And I am challenged, multiple times. I am not doing the &lt;em&gt;yet another form and submit page&lt;/em&gt; but dealing with highly throughput traffic using &lt;strong&gt;AKKA&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But you don&amp;rsquo;t come from 10 years of doing only java and see Scala and don&amp;rsquo;t bother to look around what you&amp;rsquo;ve been missing all these years. It cannot be only Scala.&lt;/p&gt;

&lt;p&gt;So I started getting to know more about languages, paradigms and so on. I gravitated towards Clojure due to it&amp;rsquo;s closeness and the fact that lives in the JVM and to Haskell, any functional programmer worth its salt knows that Haskell is the ultimate frontier.&lt;/p&gt;

&lt;p&gt;I cannot say that I have learnt Haskell but love reading about it and it&amp;rsquo;s still part of the challenges I have to accomplish.&lt;/p&gt;

&lt;p&gt;After reading &lt;em&gt;Hackers and Painters&lt;/em&gt; I was more prone to start doing something in Lisp. Clojure is a Lisp dialect that lives in the JVM but also in Javascript.&lt;/p&gt;

&lt;p&gt;And now I&amp;rsquo;m in the work of  replacing all my Javascript/DOJO dependencies with Clojurescript. Every time I write Clojure (or Scala for that matter) I feel challenged, is like the code tells me &lt;em&gt;make sure you write it properly, be worthy of me&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On my next deliveries I will write how I migrated to Clojurescript. In the mean time, check github:
&lt;a href=&#34;https://github.com/lnramirez/lnramirez/tree/clojurescript&#34;&gt;https://github.com/lnramirez/lnramirez/tree/clojurescript&lt;/a&gt;
specially Clojurescode: &lt;a href=&#34;https://github.com/lnramirez/lnramirez/tree/clojurescript/src/main/cljs/bajoneando&#34;&gt;https://github.com/lnramirez/lnramirez/tree/clojurescript/src/main/cljs/bajoneando&lt;/a&gt;
I&amp;rsquo;m using clojurescript, facebook-react with OM&amp;rsquo;s help&lt;/p&gt;

&lt;p&gt;I haven&amp;rsquo;t been able to actually deploy the app in &lt;em&gt;openshift&lt;/em&gt; since I don&amp;rsquo;t know how too hook a gradle build with a leinigen build. Maybe I will have to throw away gradle for leinigen altogether.&lt;/p&gt;

&lt;p&gt;P.S. is kind of funny that this entry is a draft from 31st of January, 2015. Seems like is so hard to publish or do something on the side. It definitely requires a lot of discipline.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groovy scripting</title>
      <link>https://lnramirez.github.io/post/groovy-scripting/</link>
      <pubDate>Sun, 26 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/groovy-scripting/</guid>
      <description>&lt;p&gt;I fix things now and then, more often tweak HTML and make scripts to do things.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Dennis Ritchie&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There was a time in my life when the only language I knew was java. One thing that always bothered me was that more often than not just writing the simplest program required too much ceremony. Then I decided that I would learn a scripting language. Python, Ruby, Perl  were on my table, yet again the narrowed java developer mind couldn&amp;rsquo;t adapt so I went for Groovy. Was fairly familiar and had access to all java glory.&lt;/p&gt;

&lt;p&gt;I am no groovy expert and I don&amp;rsquo;t intend to do it. It&amp;rsquo;s the second language I put some effort to learn it but I couldn&amp;rsquo;t master it at all. I do some scripting specially when I need to query databases or create files.&lt;/p&gt;

&lt;p&gt;Cassandra is a NoSQL databases that happens to be very difficult to query since has no relationships, you can say that maybe we are doing things wrong, but I think eventually you&amp;rsquo;d want to do operations over your data. So one quick way to do it is with groovy.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a very simple script, receives a couple of parameters, connects to cassandra and prints some info to the output in a loop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Grab(&#39;org.slf4j:slf4j-api:1.7.2&#39;)
@Grab(&#39;commons-codec:commons-codec:1.9&#39;)
@Grab(&#39;com.netflix.astyanax:astyanax-core:1.56.37&#39;)
@Grab(&#39;com.netflix.astyanax:astyanax-thrift:1.56.37&#39;)
@Grab(&#39;com.netflix.astyanax:astyanax-cassandra:1.56.37&#39;)

import com.netflix.astyanax.*
import com.netflix.astyanax.impl.AstyanaxConfigurationImpl
import com.netflix.astyanax.connectionpool.impl.*
import com.netflix.astyanax.connectionpool.OperationResult
import com.netflix.astyanax.thrift.ThriftFamilyFactory
import com.netflix.astyanax.model.ColumnFamily
import com.netflix.astyanax.connectionpool.exceptions.ConnectionException
import com.netflix.astyanax.serializers.*
import java.util.regex.Matcher
import java.util.regex.Pattern

def cli = new CliBuilder(usage: &#39;feed.groovy -[cdflms] [date] [prefix]&#39;)

def formatPattern = &#39;dd/MM/yyyy HH:mm&#39;

cli.with {
  h longOpt: &#39;help&#39;, &#39;Show usage information&#39;
  d longOpt: &#39;database-file&#39;, args: 1, argName: &#39;file&#39;, &#39;database properties file &amp;quot;file&amp;quot; e.g. local.properties&#39;
  u longOpt: &#39;user&#39;, args: 1, argName: &#39;user&#39;, &#39;user id&#39;
}

def options = cli.parse(args)
if (!options) {
  return
}

if (options.h) {
  cli.usage()
  return
}

def now = new Date().format(formatPattern)

def database = options.d?:&#39;local.properties&#39;

def userId = options.u

def props = new Properties()
new File(database).withInputStream { 
  stream -&amp;gt; props.load(stream) 
}

def clusterName = props[&amp;quot;cassandra.cluster.name&amp;quot;]
def keyspaceName = props[&amp;quot;cassandra.keyspace.name&amp;quot;]
def seeds = props[&amp;quot;cassandra.seeds&amp;quot;]

AstyanaxContext context = new AstyanaxContext.Builder().forCluster(clusterName).forKeyspace(keyspaceName)
 .withAstyanaxConfiguration(new AstyanaxConfigurationImpl().setCqlVersion(&amp;quot;3.0.0&amp;quot;).setTargetCassandraVersion(&amp;quot;1.2&amp;quot;)
)
 .withConnectionPoolConfiguration(new ConnectionPoolConfigurationImpl(clusterName+&amp;quot;-&amp;quot;+keyspaceName+&amp;quot;_CONN_POOL&amp;quot;)
   .setPort(9160).setSeeds(seeds)
 ).withConnectionPoolMonitor(new CountingConnectionPoolMonitor()).buildKeyspace(ThriftFamilyFactory.getInstance())

context.start()
Keyspace keyspace = context.getClient()

def CF_TIMELINE = ColumnFamily.newColumnFamily(&amp;quot;timeline&amp;quot;, 
    StringSerializer.get(),
    StringSerializer.get())

OperationResult result

BufferedReader br = new BufferedReader(new InputStreamReader(System.in))
def str = &#39;y&#39;
while (str.equals(&#39;y&#39;)) {

  result = keyspace.prepareQuery(CF_TIMELINE).withCql(&amp;quot;SELECT * FROM timeline WHERE user_id = &#39;${userId}&#39;&amp;quot;).execute()
  result.getResult().getRows().each { row -&amp;gt;
    def columns = row.getColumns()
    //do something funny here
  }

  str = br.readLine()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is very simple, the way to run it if you have groovy installed is&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; groovy cassie.groovy -d load-test.properties -u auserid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now there will be times when you want to share your script with someone else not initiated in groovy (let&amp;rsquo;s call him a muggle) then how can you wrap this in a brand new jvm without groovy?  To package all this in a java project you&amp;rsquo;d have to use:
1. create a maven project (gradle is less code)
2. create all the directories that come with that, src, main, resource, com.. blah blah blah
3. set up your pom.xml with some plugin that will package it in one file (maven-one-jar) comes to mind.
4. by now you are already using an IDE and is no longer a script file, is just a gigantic pain.&lt;/p&gt;

&lt;p&gt;well thank to &lt;a href=&#34;http://docs.codehaus.org/display/GROOVY/WrappingGroovyScript&#34;&gt;http://docs.codehaus.org/display/GROOVY/WrappingGroovyScript&lt;/a&gt; post I was able to compile my script into a single jar &lt;strong&gt;but most importantly&lt;/strong&gt; it will fetch also Grapes dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/*
 * Copyright 2002-2007 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Wrap a script and groovy jars to an executable jar
 */
def cli = new CliBuilder()
cli.h( longOpt: &#39;help&#39;, required: false, &#39;show usage information&#39; )
cli.d( longOpt: &#39;destfile&#39;, argName: &#39;destfile&#39;, required: false, args: 1, &#39;jar destintation filename, defaults to {mainclass}.jar&#39; )
cli.m( longOpt: &#39;mainclass&#39;, argName: &#39;mainclass&#39;, required: true, args: 1, &#39;fully qualified main class, eg. HelloWorld&#39; )
cli.c( longOpt: &#39;groovyc&#39;, required: false, &#39;Run groovyc&#39; )

//--------------------------------------------------------------------------
def opt = cli.parse(args)
if (!opt) { return }
if (opt.h) {
  cli.usage();
  return
}

def mainClass = opt.m
def scriptBase = mainClass.replace( &#39;.&#39;, &#39;/&#39; )
def scriptFile = new File( scriptBase + &#39;.groovy&#39; )
if (!scriptFile.canRead()) {
   println &amp;quot;Cannot read script file: &#39;${scriptFile}&#39;&amp;quot;
   return
}
def destFile = scriptBase + &#39;.jar&#39;
if (opt.d) {
  destFile = opt.d
}

//--------------------------------------------------------------------------
def ant = new AntBuilder()

if (opt.c) {
  ant.echo( &amp;quot;Compiling ${scriptFile}&amp;quot; )
  org.codehaus.groovy.tools.FileSystemCompiler.main( [ scriptFile ] as String[] )
}

def GROOVY_HOME = new File( System.getenv(&#39;GROOVY_HOME&#39;) )
if (!GROOVY_HOME.canRead()) {
  ant.echo( &amp;quot;Missing environment variable GROOVY_HOME: &#39;${GROOVY_HOME}&#39;&amp;quot; )
  return
}

def grapes = [] as HashSet
ant.echo(&amp;quot;Resolving grape dependencies&amp;quot;)
def scriptCode = scriptFile.text
matcher = (scriptCode =~ /(@Grab\(&#39;(.*):(.*):(.*)&#39;\))/)
matcher.each() { dep -&amp;gt;
  ant.echo(&amp;quot;found&amp;quot;)
 def uri = groovy.grape.Grape.resolve([autoDownload:true], [groupId: dep[2], artifactId: dep[3], version: dep[4]])
 if (uri?.size()&amp;gt;0) {
  uri.each() { f -&amp;gt;
  ant.echo(&amp;quot;Found dependency: ${f.toString()}&amp;quot;)
   grapes &amp;lt;&amp;lt; f
  }
 }
} 

ant.jar( destfile: destFile, compress: true, index: true ) {
 fileset( dir: &#39;.&#39;, includes: scriptBase + &#39;*.class&#39; )
 zipgroupfileset( dir: GROOVY_HOME, includes: &#39;embeddable/groovy-all-*.jar&#39; )
 zipgroupfileset( dir: GROOVY_HOME, includes: &#39;lib/commons*.jar&#39; )
 grapes.each() { grape -&amp;gt;
   def grapeFile = new File(grape)
   if (grapeFile.exists()) {
       zipgroupfileset(dir: grapeFile.parent, includes: grapeFile.name)
   }
 }
 manifest {
    attribute( name: &#39;Main-Class&#39;, value: mainClass )
  }
}

ant.echo( &amp;quot;Run script using: \&#39;java -jar ${destFile} ...\&#39;&amp;quot; )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then in order to do all the packaging you do&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;groovy GroovyWrapper -c -m cassie
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this will create a jar &lt;em&gt;cassie.jar&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;and to run it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java -Dgroovy.grape.enable=false -jar cassie.jar -d load-test.properties -u aUserId
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;voila you have a quick way to do scripts that use the good java libraries you love, in a single file and if you want to share it with muggles is very simple too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Securing your application</title>
      <link>https://lnramirez.github.io/post/securing-your-application/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/securing-your-application/</guid>
      <description>&lt;p&gt;Back in june I access bajoneando only to find that I had a new entry on my blog, which I didn&amp;rsquo;t remember doing it. When I checked the data it was empty, just had the date 6/2/2014. It occurred to me that somebody might have checked my password at github (it was hardcoded) and tried to add something. So I removed it and continue with my life. After a while it happened again. And well it just happened yesterday. &lt;em&gt;Sigh&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I decided I should invest some time in really finding out what the problem was.&lt;/p&gt;

&lt;p&gt;Well, it just so happened that I didn&amp;rsquo;t secure methods, I had some security in order to prevent users from navigating to some pages but, alas, I forgot to secure POST, PUT, DELETE methods I didn&amp;rsquo;t want to be accessed.&lt;/p&gt;

&lt;p&gt;This is a snippet of my spring security before today&amp;rsquo;s change&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;global-method-security pre-post-annotations=&amp;quot;enabled&amp;quot;/&amp;gt;

&amp;lt;http auto-config=&amp;quot;true&amp;quot; use-expressions=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/images/download/**&amp;quot; access=&amp;quot;permitAll&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/images/**&amp;quot; access=&amp;quot;hasRole(&#39;ROLE_ADMIN&#39;)&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/resources/**&amp;quot; access=&amp;quot;permitAll&amp;quot; /&amp;gt;
    &amp;lt;logout logout-success-url=&amp;quot;/&amp;quot; /&amp;gt;
&amp;lt;/http&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;basically I thought I didn&amp;rsquo;t want people uploading images since anyone could do it. Users could go almost anywhere but based on their roles they would not be able to add a new entry. At the http level everything was opened.&lt;/p&gt;

&lt;p&gt;For example, the method to add a new post is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@RequestMapping(method=RequestMethod.POST)
public String addEntry(@ModelAttribute(value=&amp;quot;blogEntry&amp;quot; value=&amp;quot;/blog&amp;quot;) BlogEntry blogEntry) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;so basically you could use postman app and generate a post to &lt;a href=&#34;http://www.bajoneando.com/blog/&#34;&gt;http://www.bajoneando.com/blog/&lt;/a&gt; url and insert a new record, which I think is what was going on. More likely a web crawler doing it. I tried it and boom! I added a new record just like the ones I&amp;rsquo;ve been deleting lately.&lt;/p&gt;

&lt;p&gt;In order to secure those methods I updated my spring security as so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;http auto-config=&amp;quot;true&amp;quot; use-expressions=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/visit/add/**&amp;quot; method=&amp;quot;POST&amp;quot; access=&amp;quot;permitAll&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/**&amp;quot; method=&amp;quot;POST&amp;quot; access=&amp;quot;hasRole(&#39;ROLE_ADMIN&#39;)&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/**&amp;quot; method=&amp;quot;PUT&amp;quot; access=&amp;quot;hasRole(&#39;ROLE_ADMIN&#39;)&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/**&amp;quot; method=&amp;quot;DELETE&amp;quot; access=&amp;quot;hasRole(&#39;ROLE_ADMIN&#39;)&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/images/download/**&amp;quot; access=&amp;quot;permitAll&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/images/**&amp;quot; access=&amp;quot;hasRole(&#39;ROLE_ADMIN&#39;)&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/resources/**&amp;quot; access=&amp;quot;permitAll&amp;quot; /&amp;gt;
    &amp;lt;logout logout-success-url=&amp;quot;/&amp;quot; /&amp;gt;
&amp;lt;/http&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Most of my post, put, delete methods you need to have ROLE_ADMIN, except for add a new visit (which I&amp;rsquo;ve been tracking) for any user accessing the site through a browser with javascript enabled. Works like a charm. I expect no more ghosts posts in bajoneando.&lt;/p&gt;

&lt;p&gt;By the way, while securing my app, I found out that url patterns are sensitive to order, which now that I think so, makes sense. For example I had before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;intercept-url pattern=&amp;quot;/**&amp;quot; method=&amp;quot;POST&amp;quot; access=&amp;quot;hasRole(&#39;ROLE_ADMIN&#39;)&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/visit/add/**&amp;quot; method=&amp;quot;POST&amp;quot; access=&amp;quot;permitAll&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Any where you go in the app posts a new visit add, but with this configuration it would deny me access. So I switch  to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;intercept-url pattern=&amp;quot;/visit/add/**&amp;quot; method=&amp;quot;POST&amp;quot; access=&amp;quot;permitAll&amp;quot; /&amp;gt;
    &amp;lt;intercept-url pattern=&amp;quot;/**&amp;quot; method=&amp;quot;POST&amp;quot; access=&amp;quot;hasRole(&#39;ROLE_ADMIN&#39;)&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and works fine. One thing I don&amp;rsquo;t like of my current security is that for some reason instead of responding with a 403 http status, responds with a 200 and sends the login html screen as response. Let&amp;rsquo;s see if I want to be so polite with my crawler and let it know it can access those methods. But I don&amp;rsquo;t think so.&lt;/p&gt;

&lt;p&gt;p.s. I think dojo is so 2009, cool kids nowadays use angular, ember or the likes. I have my intentions behind learning react and clojurescript :) that would be awesome. Let&amp;rsquo;s see if it can see the light some day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Composing Scala and Java futures</title>
      <link>https://lnramirez.github.io/post/composing-scala-and-java-futures/</link>
      <pubDate>Mon, 28 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/composing-scala-and-java-futures/</guid>
      <description>&lt;p&gt;For the last two years I have gravitated towards Scala and Functional programming. My work in that area has been focused into concurrency and especially &lt;em&gt;AKKA&lt;/em&gt; interacting with the &lt;em&gt;Atmosphere Framework&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been using AKKA in its Scala version and Atmosphere is Java. Although I will love to write only Scala code, over and over again you need to interface with Java due to legacy code or because there aren&amp;rsquo;t Scala libraries as mature as Java. That being the case of Atmosphere, per sites description&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Atmosphere Framework provides the enterprise features required to build massive scalable and real time asynchronous applications using transports like WebSocket, Server Side Events and traditional Ajax Techniques.
source: &lt;a href=&#34;http://async-io.org/&#34;&gt;async-io.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Trying to keep this to the point, atmosphere communicates with subscribers using Broadcaster interface&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface Broadcaster {
/**
 * Broadcast the {@link Object} to all suspended responses, eg. invoke {@link AtmosphereHandler#onStateChange}.
 *
 * @param o the {@link Object} to be broadcasted
 * @return a {@link Future} that can be used to synchronize using the {@link Future#get()}
 */
Future&amp;lt;Object&amp;gt; broadcast(Object o);
//more code omitted
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can invoke broadcast and treat it as a fire and forget operation&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Java code
Broadcaster broadcaster = BroadcasterFactory.getDefault.lookup(target);
broadcaster.broadcast(mymessage);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the broadcast method returns a future which makes it asynchronous, but what if you want to know if was able to broadcast the message? well, you could call get method on the future&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Java code
Broadcaster broadcaster = BroadcasterFactory.getDefault.lookup(target);
Future&amp;lt;Object&amp;gt; future = broadcaster.broadcast(mymessage);
future.get();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;simple right? well, it just so happen that by invoking .get() you are blocking the thread and therefore you are no longer asynchronously processing your broadcasts. One nice way to do it is by wrapping the Java future with a Scala one like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    val broadcastFuture = future {
      val broadcast = x.broadcast(cmd)//this is the Java call
      broadcast.get()//this is blocking in some thread
    }
    broadcastFuture.onComplete {
      case Success(obj) =&amp;gt;
        log.debug(s&amp;quot;$cmd delivered to $target&amp;quot;)
      case Failure(ex) =&amp;gt;
        log.error(s&amp;quot;$cmd was not delivered to target&amp;quot;) //invoke here your fallback method
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is so simple and beautiful. I am so happy that all my concurrency knowledge comes from Scala. You see, although I remember writing a couple of synchronized methods in java I never did anything beyond homeworks and my ways to tackles this kind of problems are not polluted by the javaish way. Scala concurrency capabilities are so rich and simple.&lt;/p&gt;

&lt;p&gt;Probably next time I will show you how you can integrate Scala with Spring Framework.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Cloudfoundry to Openshift</title>
      <link>https://lnramirez.github.io/post/from-cloudfoundry-to-openshift/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/from-cloudfoundry-to-openshift/</guid>
      <description>&lt;p&gt;The first time I deployed lnramirez at Cloudfoundry I told myself it wouldn&amp;rsquo;t last forever. I knew it. It happened. On jun 5th I got an email telling me Cloudfoundry V1 was going to be closed on jun 30th and I could migrate my applications to V2 a.k.a. GoPivotal which will be a paid service. Bummer.&lt;/p&gt;

&lt;p&gt;I run my own blog as a hobbie and obviously I haven&amp;rsquo;t been able to monetize it at all. There&amp;rsquo;s no way I was going to pay it. After it was shutdown on june 30th I sent an email to GoPivotal team requesting they send me a backup of my MongoDb database, they were really nice and send me dump files.&lt;/p&gt;

&lt;p&gt;I had a couple of ideas where to migrate, needed a PaaS that would allow me to deploy lnramirez with MongoDb available.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Openshift&lt;/li&gt;
&lt;li&gt;Amazon Web Services&lt;/li&gt;
&lt;li&gt;Google App Engine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I knew I could deploy a J2EE web application at Google App Engine but MongoDb was out of the picture.&lt;/p&gt;

&lt;p&gt;Amazon could be of use but doesn&amp;rsquo;t come with out spending money, unless you run micro-instances which they come for free but only for a year. A co-worker told me I could create a new account every year but that seems a little bit stressful at least once a year.&lt;/p&gt;

&lt;p&gt;Finally Openshift would be my best solution but came with issues as well. In order to deploy a J2EE app you could use Openshift integration with Maven but I happened to use gradle for my building system. There must be a way to address all this but it would require certain work done. Once more, bummer.&lt;/p&gt;

&lt;p&gt;After procrastinating for four months I told myself was enough. I was reading couple of links and out of the blue I bumped into an article explaining how to  &lt;a href=&#34;https://www.openshift.com/blogs/run-gradle-builds-on-openshift&#34;&gt;Run Gradle Builds on OpenShift&lt;/a&gt;. Shekhar Gulati has become my personal savior, I won&amp;rsquo;t bother explaining how I keep using gradle as build tool and being able to deploy in OpenShift, Shekhar does a pretty good job.&lt;/p&gt;

&lt;p&gt;But as usual something came up. When I was deploying in CloudFoundry you upload a WAR file. As easy as that. Unfortunately in OpenShift is a little bit more involved, you use git uploading your whole project, building it and eventually deploying it. Even though, thanks to Shekhar, I was closer to be able to deploy the application I couldn&amp;rsquo;t due to a dependency to one of my own artifacts &lt;em&gt;bajoneandotags&lt;/em&gt;. Beofre I hadn&amp;rsquo;t had that problem because the WAR I was uploading was, well, packed already with all dependencies, now I was able to obtain dependencies through gradle but what about my artifacts? they are not mantained by anyone but me.&lt;/p&gt;

&lt;p&gt;I eventually gravitated towards &lt;a href=&#34;http://marcellodesales.wordpress.com/2012/04/24/managing-and-building-version-controlled-maven-repos-using-git-gradle-and-nexus-server/&#34;&gt;Marcello de Sale&amp;rsquo;s Blog&lt;/a&gt; and after trial and error I was able to deployed my snapshots artifacts in my own github. Awesome! &lt;a href=&#34;https://github.com/lnramirez/lnramirez-mvn-repo&#34;&gt;https://github.com/lnramirez/lnramirez-mvn-repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Given that instead of using my local maven I only had to add reference to the newly created mvn repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;maven {
  url &amp;quot;https://github.com/lnramirez/lnramirez-mvn-repo/raw/master/snapshots&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and finally I was able to deploy once more lnramirez into the internet. Java compile once run everywhere stand for it self but build once deploy everywhere is still far from being reality. Nonetheless, I must say it surprised me that I was able to do it.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s see how this adventure goes with Openshift. Red Hat is a well respected tech company that stands for being open and knows how to monetize money from open source or thing where no one sees an angle. Hopefully lnramirez has found a new haven.&lt;/p&gt;

&lt;p&gt;P.S. can you tell I am using &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Twitter Bootstrap?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bajoneando.com and Lolotiquillo 0.1.6 release</title>
      <link>https://lnramirez.github.io/post/bajoneandocom-and-lolotiquillo-016-release/</link>
      <pubDate>Fri, 08 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/bajoneandocom-and-lolotiquillo-016-release/</guid>
      <description>&lt;p&gt;###Bajoneando.com###&lt;/p&gt;

&lt;p&gt;If you have checked my code in &lt;a href=&#34;https://github.com/lnramirez&#34;&gt;github&lt;/a&gt; you&amp;rsquo;d know by now that my packages are named &lt;strong&gt;com.bajoneando&lt;/strong&gt;. Also one of my early entries on the blog was about the &lt;a href=&#34;http://lnramirez.cloudfoundry.com/blog/4f7f4cf4269873031146eecd/Bajoneando+meaning&#34;&gt;meaning of Bajoneando&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Anyways, about a year ago I decided to start coding just for fun, to show off a little what I can do and to have a place to share my anecdotes and sorrows. That being said this is a &lt;strong&gt;cloudfoundry&lt;/strong&gt; hosted site which I don&amp;rsquo;t know how much longer is going to last (read between lines for free), so at some point if it ever comes with a charge I would like it to be under my fairly new and fresh domain &lt;a href=&#34;http://www.bajoneando.com&#34;&gt;www.Bajoneando.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As of today it&amp;rsquo;s only redirecting to &lt;a href=&#34;http://lnramirez.cloudfoundry.com&#34;&gt;lnramirez.cloudfoundry.com&lt;/a&gt; which is pretty good to me. I didn&amp;rsquo;t want anybody stealing that awesome domain.&lt;/p&gt;

&lt;p&gt;###CSS###&lt;/p&gt;

&lt;p&gt;On wednesday I changed the look and feel of the site, nothing fancy just a new header and a navigation menu with it. I must say that I am no designer and nor interested on that field for a living but it&amp;rsquo;s good to get your hands dirty and start trial and error CSS, that&amp;rsquo;s my CSS way. Hope you find at least a little bit more appealing than the old way. Also there&amp;rsquo;s no more home link, now link reads Bajoneando in order to align with the new domain.&lt;/p&gt;

&lt;p&gt;###Lolotiquillo and the process###&lt;/p&gt;

&lt;p&gt;After &lt;a href=&#34;http://lnramirez.cloudfoundry.com/blog/50188e462d95d47dae8311ef/From+Intipuca+to+Jucuapa&#34;&gt;Jucuapa&lt;/a&gt; iteration I could not find a salvadorean province that started with K letter so I decided bump next letter and go with Lolotiquillo a.k.a. version 0.1.6. I still have not come back to a two week sprint plus release but as long as new good features are being added I&amp;rsquo;m happy.&lt;/p&gt;

&lt;p&gt;Next iteration: &lt;strong&gt;Masahuat&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating from Dojo 1.7 to 2.x</title>
      <link>https://lnramirez.github.io/post/migrating-from-dojo-17-to-2x/</link>
      <pubDate>Thu, 07 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/migrating-from-dojo-17-to-2x/</guid>
      <description>&lt;p&gt;Throughout superbowl weekend I started migrating to a newer version of Dojo, especifically from Dojo 1.7.2 to 1.8.3. One resource that help me a lot through the processs was &lt;a href=&#34;http://dojotoolkit.org/reference-guide/1.8/releasenotes/migration-2.0.html&#34;&gt;Dojo 1.x to 2.0 migration guide&lt;/a&gt; I must say that I built my own Dojo version, it&amp;rsquo;s supposed to optimize it to your needs but to tell you the truth I just did it for the sake of doing it.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://dojotoolkit.org/documentation/tutorials/1.8/build/&#34;&gt;Creating Builds&lt;/a&gt; tutorial is more than helpful but brings a lot of information, in summary you need to create two build files and run it. I leave you the two files (links to gist) that might be good enough to just build it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/lnramirez/4733370&#34;&gt;package.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/lnramirez/f0739ca02fb136d063c6&#34;&gt;lnramirez.profile.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, when it comes to the changes I had to do to the code I had to remove anything using the good &lt;em&gt;dojo.somemodule&lt;/em&gt; for &lt;em&gt;require(&amp;ldquo;somemodule&amp;rdquo;)&lt;/em&gt;, I will explain with code:&lt;/p&gt;

&lt;p&gt;In my 1.7 code I had&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var xhrArgs = {
    url: &amp;quot;${pageContext.request.contextPath}/blog/single/&amp;quot; + _id,
    handleAs: &amp;quot;json&amp;quot;,
    load: function(data) {return data;},
    error: function(error) {return error;}
}
var deferred = dojo.xhrGet(xhrArgs);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as you can see I am using &lt;em&gt;dojo.xhrGet&lt;/em&gt; in 2.X versions although there&amp;rsquo;s suposed backward compatibility on using dojo. seems like my build file did something phony and totally refrained from liking it. Anyhow at some point it will change so no harm done you had to change it slightly&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require([&amp;quot;dojo/json&amp;quot;,&amp;quot;dojo/request/xhr&amp;quot;,json,xhr) {
    xhr.get(&amp;quot;${pageContext.request.contextPath}/blog/single/&amp;quot; + _id,{handleAs: &amp;quot;json&amp;quot;})
        .then(function(blogentry) {
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s about it.&lt;/p&gt;

&lt;p&gt;Only thing really frustrated me was the use of script. If you go to the about &lt;a href=&#34;about/&#34;&gt;link&lt;/a&gt; you will see my github and twitter accounts, there&amp;rsquo;s an actual call to each of those sites to retrive my repositories and followers, and tweets and followers respectively. So accordingly to migration link &lt;strong&gt;dojo.xhr* and dojo.io.* have been replaced with dojo/request&lt;/strong&gt; but when I tried using them it was impossible.&lt;/p&gt;

&lt;p&gt;the correct way to form the url is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.github.com/users/lnramirez?callback=dojo.io.script.jsonp_dojoIoScript1._jsonpCallback&#34;&gt;https://api.github.com/users/lnramirez?callback=dojo.io.script.jsonp_dojoIoScript1._jsonpCallback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;but when I was using dojo/request module the url was getting tagled&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://api.github.com/users/lnramirez*[?&amp;amp;]*callback=dojo.io.script.jsonp_dojoIoScript1._jsonpCallback&#34;&gt;https://api.github.com/users/lnramirez*[?&amp;amp;]*callback=dojo.io.script.jsonp_dojoIoScript1._jsonpCallback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and also before &lt;em&gt;[?&amp;amp;]&lt;/em&gt; characters there was a CR, so beats me what was going on. My wild guess a bug.&lt;/p&gt;

&lt;p&gt;In order to make it work I had to use my old code just on the new fashion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(&amp;quot;dojo/io/script&amp;quot;,script) {
script.get({
    url: &amp;quot;https://api.github.com/users/lnramirez&amp;quot;,
            jsonp: &amp;quot;callback&amp;quot;
    }).then(function(data_) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and works like a charm.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>You are only coming through in waves</title>
      <link>https://lnramirez.github.io/post/you-are-only-coming-through-in-waves/</link>
      <pubDate>Thu, 10 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/you-are-only-coming-through-in-waves/</guid>
      <description>&lt;p&gt;Happy new year! it&amp;rsquo;s been such a long time since last post but life has been crazier than ever, what a year I had in 2012, parenthood, two jobs, my blog I could go on all day but moving on.&lt;/p&gt;

&lt;p&gt;I decided to finally upgrade my tools, gradle from b1.0 to 1.1, jdk6 to jdk7, these are my latest tools&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gradle -v

------------------------------------------------------------
Gradle 1.1
------------------------------------------------------------

Gradle build time: Tuesday, July 31, 2012 1:24:32 PM UTC
Groovy: 1.8.6
Ant: Apache Ant(TM) version 1.8.4 compiled on May 22 2012
Ivy: 2.2.0
JVM: 1.7.0_09 (Oracle Corporation 23.5-b02)
OS: Mac OS X 10.7.5 x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;my steps were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;update gradle using macport to ver 1.1&lt;/li&gt;
&lt;li&gt;update jdk to ver 1.7&lt;/li&gt;
&lt;li&gt;build the app again&lt;/li&gt;
&lt;li&gt;update source version in build.gradle&lt;/li&gt;
&lt;li&gt;build the app again&lt;/li&gt;
&lt;li&gt;deploy it back to cloudfoundry+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve been having more spare time lately so I hope I can introduce a couple of new feautures every now and then.&lt;/p&gt;

&lt;p&gt;+ well this was not that easy peasy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$vmc apps
name            status    usage      runtime   url                             
caldecott       stopped   1 x 64M    ruby18    caldecott-ae140.cloudfoundry.com
lnramirez       running   1 x 512M   java      lnramirez.cloudfoundry.com  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;as you can see my app had runtime set to java default ver which as of today is 1.6, and no it couldn&amp;rsquo;t hot update it. Dirty but quick fix around: deploy it as a new app lnramirez-new selecting java7 as runtime&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$vmc apps
name            status    usage      runtime   url                             
caldecott       stopped   1 x 64M    ruby18    caldecott-ae140.cloudfoundry.com
lnramirez       running   1 x 512M   java      lnramirez.cloudfoundry.com      
lnramirez-new   running   1 x 512M   java7     lnramirez-new.cloudfoundry.com  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then map the new version to lnramirez url and remove the old one&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vmc map lnramirez-new lnramirez.cloudfoundry.com
Updating lnramirez-new... OK
$ vmc unmap lnramirez 
1: lnramirez.cloudfoundry.com
Which URL?&amp;gt; 1         

Updating lnramirez... OK
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voilà! everything good then probably I should remove my old lnramirez but I&amp;rsquo;ll have it around so I can do a hot deployment next time.&lt;/p&gt;

&lt;p&gt;probably I could have done using some CF commands but I always wanted to try mapping and unmapping, a couple of times -shame on me- I deploy a newer version and it doesn&amp;rsquo;t work. So this way I know how to do a hot deployment with out affecting my users :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Mongo and GridFS to store images</title>
      <link>https://lnramirez.github.io/post/using-mongo-and-grid-fs-to-store-images/</link>
      <pubDate>Sun, 26 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/using-mongo-and-grid-fs-to-store-images/</guid>
      <description>&lt;p&gt;GridFS is Mongo specification to store files, claims to be better than file system but to me querying files it&amp;rsquo;s what makes it lots better and it&amp;rsquo;s very straight forward.&lt;/p&gt;

&lt;p&gt;I am using a POJO to use within the service that performs the operations&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MongoStoredFile {

    private String id;
    private File file;
    private String name;
    private String contentType;
    private byte[] data;
    private InputStream inputStream;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The service receives a MongoStoredFile object and saves it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public String save(MongoStoredFile file) throws IOException {
    GridFS gridFS = new GridFS(mongoTemplate.getDb(),&amp;quot;images&amp;quot;);
    GridFSInputFile inputFile = gridFS.createFile(file.getData());
    inputFile.setContentType(file.getContentType());
    inputFile.setFilename(file.getName());
    inputFile.save();
    return inputFile.getId().toString();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it&amp;rsquo;s very straight forward&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create a GridFS object, receives two arguments a connection and a collections name, in this case &amp;ldquo;images&amp;rdquo;&lt;/li&gt;
&lt;li&gt;create a GridFSInputFile with files binary data&lt;/li&gt;
&lt;li&gt;set the content type&lt;/li&gt;
&lt;li&gt;set a name&lt;/li&gt;
&lt;li&gt;save it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;that simple&lt;/p&gt;

&lt;p&gt;Now if you want to retrieve the stored object, here the id is being passed as argument, but you can create a query and handle the results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public MongoStoredFile getFile(String objectId) throws IOException  {
    GridFS gridFS = new GridFS(mongoTemplate.getDb(),&amp;quot;images&amp;quot;);
    GridFSDBFile file = gridFS.find(new ObjectId(objectId));

    ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;you pass a mongo connection and a collection&amp;rsquo;s name&lt;/li&gt;
&lt;li&gt;execute a query with gridFS.find and you obtain a reference to a GridFSDBFile object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you need to extract the values and put them in our POJO MongoStoredFile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public MongoStoredFile getFile(String objectId) throws IOException  {
    GridFS gridFS = new GridFS(mongoTemplate.getDb(),&amp;quot;images&amp;quot;);
    GridFSDBFile file = gridFS.find(new ObjectId(objectId));

    ...

    MongoStoredFile mongoStoredFile = new MongoStoredFile();
    mongoStoredFile.setId(objectId.toString());
    mongoStoredFile.setName((String) file.get(&amp;quot;filename&amp;quot;));
    mongoStoredFile.setContentType((String) file.get(&amp;quot;contentType&amp;quot;));
    mongoStoredFile.setInputStream(file.getInputStream());
    return mongoStoredFile;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;that&amp;rsquo;s our service&lt;/p&gt;

&lt;p&gt;From the client side we only need to call our service, there&amp;rsquo;s some plumbing to it though&lt;/p&gt;

&lt;p&gt;JSP looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;form:form action=&amp;quot;${imagesUpload}&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot; id=&amp;quot;imageForm&amp;quot; commandName=&amp;quot;mongoStoredFile&amp;quot; name=&amp;quot;imageForm&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
    &amp;lt;fieldset&amp;gt;
        &amp;lt;p&amp;gt;
            &amp;lt;label for=&amp;quot;subject&amp;quot;&amp;gt;File:&amp;lt;/label&amp;gt;
            &amp;lt;form:input path=&amp;quot;file&amp;quot; type=&amp;quot;file&amp;quot; id=&amp;quot;file&amp;quot; 
                        placeholder=&amp;quot;File:&amp;quot; required=&amp;quot;required&amp;quot; /&amp;gt;
        &amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;
            &amp;lt;input type=&amp;quot;submit&amp;quot; id=&amp;quot;formButton&amp;quot; value=&amp;quot;Upload File&amp;quot; &amp;gt;
        &amp;lt;/p&amp;gt;
    &amp;lt;/fieldset&amp;gt;
&amp;lt;/form:form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the server counterpart&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void upload(@RequestParam(&amp;quot;file&amp;quot;) MultipartFile multipartFile, final HttpServletResponse response) throws IOException {
    if (multipartFile == null) {
        throw new RuntimeException(&amp;quot;file null&amp;quot;);
    }
    MongoStoredFile image = new MongoStoredFile();
    image.setName(multipartFile.getOriginalFilename());
    image.setContentType(multipartFile.getContentType());
    image.setData(multipartFile.getBytes());
    fileService.save(image);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The post would not be complete without an example of a file hosted in this casa. I have taken keen interest in this JVM language for the last month. I am seriously contemplating moving my efforts into that direction.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lnramirez.github.io/images/download/503a1791c75e2bb846f5d154&#34; alt=&#34;Scala&#34; /&gt;*&lt;/p&gt;

&lt;p&gt;You can see the rest of the code at: &lt;a href=&#34;https://github.com/lnramirez/lnramirez&#34;&gt;https://github.com/lnramirez/lnramirez&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;*Image taken from: &lt;a href=&#34;http://www.scala-lang.org/docu/files/packageobjects/scala-logo.png&#34;&gt;http://www.scala-lang.org/docu/files/packageobjects/scala-logo.png&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Intipuca to Jucuapa</title>
      <link>https://lnramirez.github.io/post/from-intipuca-to-jucuapa/</link>
      <pubDate>Wed, 01 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/from-intipuca-to-jucuapa/</guid>
      <description>&lt;p&gt;Long time no posting but that doesn&amp;rsquo;t mean long time no coding, au contraire! I&amp;rsquo;ve been coding a lot of neato stuff. I&amp;rsquo;ll come back to give you a full update, I&amp;rsquo;ll leave you a hint though; Where&amp;rsquo;s this screen hosted?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lnramirez.github.io/images/download/50188b3d2d95d47dae8311ec&#34; alt=&#34;From Intipuca to Jucuapa&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Map Reduce - Part 2</title>
      <link>https://lnramirez.github.io/post/on-map-reduce-part-2/</link>
      <pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/on-map-reduce-part-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://lnramirez.cloudfoundry.com/blog/4fedfebe4a14fb8d9f5e4e07/On%20Map%20Reduce%20-%20Part%201&#34;&gt;On Map Reduce - Part 1&lt;/a&gt; I introduced the use of a map reduce to retrieve the latest entry on the blog.&lt;/p&gt;

&lt;p&gt;The document where we store blog entries looks like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Document
public class BlogEntry implements Serializable {

    private String id;
    private String subject;
    private String article;
    private Date publishDate;
    private Date lastUpdateDate;
    private String printableHtml;
    //more code continues

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Spring part as I stated before is pretty straight forward, on my service I added getLastEntry method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Service
public class BlogEntryService {

    public BlogEntry getLastEntry() {
        MapReduceOptions options = new MapReduceOptions();
        MapReduceResults&amp;lt;MappedBlogEntry&amp;gt; mapReduceResults = mongoTemplate.
                mapReduce(&amp;quot;blogEntry&amp;quot;, &amp;quot;classpath:mongo/mapallblogs.js&amp;quot; , 
                &amp;quot;classpath:mongo/reducelatestblog.js&amp;quot;, MappedBlogEntry.class);
        if (mapReduceResults.iterator().hasNext()) {
            BlogEntry blogEntry = mapReduceResults.iterator().next().getValue();
            return blogEntry;
        } else {
            throw new RuntimeException(&amp;quot;No entries for blogEntry&amp;quot;);
        }
    }

    @Autowired
    private MongoTemplate mongoTemplate;

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to understand it we need to recall what our map and reduce functions looks like&lt;/p&gt;

&lt;p&gt;mapallblog.js &amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function () {
    emit(&amp;quot;blogEntry&amp;quot;, this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;on mapallblog it&amp;rsquo;s emitting the whole object as it is with all it&amp;rsquo;s properties.&lt;/p&gt;

&lt;p&gt;reducelatestblog.js &amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function (key, values) {
    var latest = values[0];
    for (var i=0;i&amp;lt;values.length;i++) {
        if (latest.publishDate &amp;lt; values[i].publishDate) {
            latest = values[i];
        }
    }
    return latest;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then on reduce function we just select the one with the oldest publishDate and return it.&lt;/p&gt;

&lt;p&gt;But what mongo does behind the scenes is map it and pair it with a reduction, hence the result of this called will be an object&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
id:&amp;quot;blogEntry&amp;quot;,
value:emittedObject
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we can map the result with another object&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MappedBlogEntry {

    private String  id;
    private BlogEntry value;
    //more code continues

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Going back to the actual spring call&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        MapReduceResults&amp;lt;MappedBlogEntry&amp;gt; mapReduceResults = mongoTemplate.
                mapReduce(&amp;quot;blogEntry&amp;quot;, &amp;quot;classpath:mongo/mapallblogs.js&amp;quot; , 
                &amp;quot;classpath:mongo/reducelatestblog.js&amp;quot;, MappedBlogEntry.class);
        if (mapReduceResults.iterator().hasNext()) {
            BlogEntry blogEntry = mapReduceResults.iterator().next().getValue();
            return blogEntry;
        } else {
            throw new RuntimeException(&amp;quot;No entries for blogEntry&amp;quot;);
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mongoTemplate.mapReduce fourth parameter is a class to which map the results this case MappedBlogEntry, and that&amp;rsquo;s about it. Every time you access home screen a map reduce function is evaluated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On Map Reduce - Part 1</title>
      <link>https://lnramirez.github.io/post/on-map-reduce-part-1/</link>
      <pubDate>Fri, 29 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://lnramirez.github.io/post/on-map-reduce-part-1/</guid>
      <description>&lt;p&gt;One of the hype things nowadays is Map Reduce, I won&amp;rsquo;t talk about it, but I&amp;rsquo;ll leave you this &lt;a href=&#34;http://lmddgtfy.co.cc/?q=map+reduce&#34;&gt;useful link&lt;/a&gt; that you&amp;rsquo;ll definitely find interesting.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have a particular necessity on using a map reduce for my big data, but I thought I could experiment with it.&lt;/p&gt;

&lt;p&gt;My map reduce is going to return me the latest blog entry based on publishDate.&lt;/p&gt;

&lt;p&gt;So first of all we need to map what are we reducing, in this case everything:&lt;/p&gt;

&lt;p&gt;mapallblog.js &amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function () {
    emit(&amp;quot;blogEntry&amp;quot;, this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;emit function takes to parameters, key and value. We&amp;rsquo;ll use my collection&amp;rsquo;s name just because, and we are emitting the current value on the second parameter.&lt;/p&gt;

&lt;p&gt;Later on, we need to define a reduce function. This one, will reduce all emission under the same key to a single object. We return the one with older publishDate.&lt;/p&gt;

&lt;p&gt;reducelatestblog.js &amp;gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function (key, values) {
    var latest = values[0];
    for (var i=0;i&amp;lt;values.length;i++) {
        if (latest.publishDate &amp;lt; values[i].publishDate) {
            latest = values[i];
        }
    }
    return latest;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s pretty much the magic under mongo map reduce function. I&amp;rsquo;ll comeback to finish with the Spring side&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>